////////////////////////////////////////////////////////////////////////////////
// Filename: transparent.ps
////////////////////////////////////////////////////////////////////////////////


/////////////
// GLOBALS //
/////////////
Texture2D shaderTexture;
SamplerState SampleType;

// A constant buffer that hold the blend amount
// blendAmount indicates was percentage to blend the texture, from 0 (0%) to 1 (100%)
cbuffer TransparentBuffer
{
    float blendAmount;
};


//////////////
// TYPEDEFS //
//////////////
struct PixelInputType
{
    float4 position : SV_POSITION;
    float2 tex : TEXCOORD0;
};


////////////////////////////////////////////////////////////////////////////////
// Pixel Shader
////////////////////////////////////////////////////////////////////////////////
float4 TransparentPixelShader(PixelInputType input) : SV_TARGET
{
    float4 color;
	
    // Sampling the texture pixel at this location
	color = shaderTexture.Sample(SampleType, input.tex);

    // Setting the alpha value of this pixel to the blending amount to create the alpha blending effect
    color.a = blendAmount;

    return color;
}